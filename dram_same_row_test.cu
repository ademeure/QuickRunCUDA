
extern "C" __global__ void kernel(const unsigned int *A, unsigned int *B, int sm, int unused1, int unused2) {
  unsigned int smid;
  asm("mov.u32 %0, %smid;" : "=r"(smid));

  if (threadIdx.x >= 32 || smid != 0) {
    __nanosleep(10000);
    return;
  }

  constexpr int num_measurements = 100;

  int4 data;
  data.x = 0; data.y = 0; data.z = 0; data.w = 0;

  int4 *B_base_ptr = (int4 *)&B[(threadIdx.x % 16) * 4];
  int4 *B_ptr;

  for (int start_idx = 0; start_idx < 408; start_idx += 2) {
    if (threadIdx.x == 0) {
      printf("=============> start_idx: %d =============\n", start_idx);
    }
    int num_slow = 0;
    if (threadIdx.x < 16) {
      B_ptr = &B_base_ptr[A[start_idx] * 16];
    }

    for (int i = start_idx+2; i < 408; i += 2) {
      if (threadIdx.x >= 16) {
        B_ptr = &B_base_ptr[A[i] * 16];
      }
      unsigned long long total_duration = 0;
      int4 tmp;

      unsigned long long start_warmup = clock64();
      asm volatile ("ld.global.cg.v4.u32 {%0,%1,%2,%3}, [%4];" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(&B_ptr[data.x]));
      data.x += tmp.x; data.y += tmp.y; data.z += tmp.z; data.w += tmp.w;
      asm volatile ("discard.global.L2 [%0], 128;" : : "l"(B_ptr));
      asm volatile ("membar.cta;");
      unsigned long long end_warmup = clock64();
      if (end_warmup - start_warmup < 465) {
        continue;
      }
      __nanosleep(1000);

      #pragma unroll 1
      for (int k = 0; k < num_measurements; k++) {
        unsigned long long start = clock64();
        asm volatile ("ld.global.cg.v4.u32 {%0,%1,%2,%3}, [%4];" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(&B_ptr[data.x]));
        data.x += tmp.x; data.y += tmp.y; data.z += tmp.z; data.w += tmp.w;
        unsigned long long end = clock64();
        total_duration += end - start;
        asm volatile ("discard.global.L2 [%0], 128;" : : "l"(B_ptr));
        __nanosleep(100);
      }
      if (threadIdx.x == 0) {
        float avg_time = (float)total_duration / (float)num_measurements;
        if (avg_time > 465.0) {
          num_slow++;
          printf("%d, A[start_idx]: %d, A[i]: %d ==> %.3f (%d)\n", i, A[start_idx], A[i], avg_time, num_slow);
        }
      }
    }
  }

  if (data.x + data.y + data.z + data.w == 77) {
    B[threadIdx.x] = 3;
  }
}

// init kernel
extern "C" __global__ void init(unsigned int *A, unsigned int *B, int sm, int unused1, int unused2) {
  if (threadIdx.x != 0 || blockIdx.x != 0) {
    return;
  }

  // Initialize A with values from first column of CSV
  A[0] = 25;
  A[1] = 27;
  A[2] = 165;
  A[3] = 167;
  A[4] = 264;
  A[5] = 266;
  A[6] = 436;
  A[7] = 438;
  A[8] = 700;
  A[9] = 702;
  A[10] = 941;
  A[11] = 943;
  A[12] = 1117;
  A[13] = 1119;
  A[14] = 1253;
  A[15] = 1255;
  A[16] = 1356;
  A[17] = 1358;
  A[18] = 1524;
  A[19] = 1526;
  A[20] = 1789;
  A[21] = 1791;
  A[22] = 2028;
  A[23] = 2030;
  A[24] = 2161;
  A[25] = 2163;
  A[26] = 2253;
  A[27] = 2255;
  A[28] = 2400;
  A[29] = 2402;
  A[30] = 2524;
  A[31] = 2526;
  A[32] = 2665;
  A[33] = 2667;
  A[34] = 2773;
  A[35] = 2775;
  A[36] = 2936;
  A[37] = 2938;
  A[38] = 3012;
  A[39] = 3014;
  A[40] = 3209;
  A[41] = 3211;
  A[42] = 3480;
  A[43] = 3482;
  A[44] = 3625;
  A[45] = 3627;
  A[46] = 3729;
  A[47] = 3731;
  A[48] = 3896;
  A[49] = 3898;
  A[50] = 3968;
  A[51] = 3970;
  A[52] = 4132;
  A[53] = 4134;
  A[54] = 4405;
  A[55] = 4407;
  A[56] = 4669;
  A[57] = 4671;
  A[58] = 4737;
  A[59] = 4739;
  A[60] = 4908;
  A[61] = 4910;
  A[62] = 5008;
  A[63] = 5010;
  A[64] = 5216;
  A[65] = 5218;
  A[66] = 5340;
  A[67] = 5342;
  A[68] = 5489;
  A[69] = 5491;
  A[70] = 5581;
  A[71] = 5583;
  A[72] = 5753;
  A[73] = 5755;
  A[74] = 5992;
  A[75] = 5994;
  A[76] = 6216;
  A[77] = 6218;
  A[78] = 6384;
  A[79] = 6386;
  A[80] = 6489;
  A[81] = 6491;
  A[82] = 6625;
  A[83] = 6627;
  A[84] = 6888;
  A[85] = 6890;
  A[86] = 7161;
  A[87] = 7163;
  A[88] = 7176;
  A[89] = 7178;
  A[90] = 7348;
  A[91] = 7350;
  A[92] = 7449;
  A[93] = 7451;
  A[94] = 7589;
  A[95] = 7591;
  A[96] = 7696;
  A[97] = 7698;
  A[98] = 7852;
  A[99] = 7854;
  A[100] = 7937;
  A[101] = 7939;
  A[102] = 8125;
  A[103] = 8127;
  A[104] = 8340;
  A[105] = 8342;
  A[106] = 8581;
  A[107] = 8583;
  A[108] = 8756;
  A[109] = 8758;
  A[110] = 8844;
  A[111] = 8846;
  A[112] = 8997;
  A[113] = 8999;
  A[114] = 9117;
  A[115] = 9119;
  A[116] = 9429;
  A[117] = 9431;
  A[118] = 9668;
  A[119] = 9670;
  A[120] = 9840;
  A[121] = 9842;
  A[122] = 9932;
  A[123] = 9934;
  A[124] = 10081;
  A[125] = 10083;
  A[126] = 10205;
  A[127] = 10207;
  A[128] = 10305;
  A[129] = 10307;
  A[130] = 10493;
  A[131] = 10495;
  A[132] = 10576;
  A[133] = 10578;
  A[134] = 10732;
  A[135] = 10734;
  A[136] = 10840;
  A[137] = 10842;
  A[138] = 11081;
  A[139] = 11083;
  A[140] = 11265;
  A[141] = 11267;
  A[142] = 11449;
  A[143] = 11451;
  A[144] = 11536;
  A[145] = 11538;
  A[146] = 11688;
  A[147] = 11690;
  A[148] = 11801;
  A[149] = 11803;
  A[150] = 12040;
  A[151] = 12042;
  A[152] = 12309;
  A[153] = 12311;
  A[154] = 12457;
  A[155] = 12459;
  A[156] = 12548;
  A[157] = 12550;
  A[158] = 12728;
  A[159] = 12730;
  A[160] = 12813;
  A[161] = 12815;
  A[162] = 12977;
  A[163] = 12979;
  A[164] = 13084;
  A[165] = 13086;
  A[166] = 13216;
  A[167] = 13218;
  A[168] = 13393;
  A[169] = 13395;
  A[170] = 13632;
  A[171] = 13634;
  A[172] = 13897;
  A[173] = 13899;
  A[174] = 14065;
  A[175] = 14067;
  A[176] = 14168;
  A[177] = 14170;
  A[178] = 14304;
  A[179] = 14306;
  A[180] = 14528;
  A[181] = 14530;
  A[182] = 14801;
  A[183] = 14803;
  A[184] = 14949;
  A[185] = 14951;
  A[186] = 15065;
  A[187] = 15067;
  A[188] = 15220;
  A[189] = 15222;
  A[190] = 15304;
  A[191] = 15306;
  A[192] = 15416;
  A[193] = 15418;
  A[194] = 15492;
  A[195] = 15494;
  A[196] = 15657;
  A[197] = 15659;
  A[198] = 15765;
  A[199] = 15767;
  A[200] = 16029;
  A[201] = 16031;
  A[202] = 16268;
  A[203] = 16270;
  A[204] = 16445;
  A[205] = 16447;
  A[206] = 16517;
  A[207] = 16519;
  A[208] = 16684;
  A[209] = 16686;
  A[210] = 16788;
  A[211] = 16790;
  A[212] = 17053;
  A[213] = 17055;
  A[214] = 17292;
  A[215] = 17294;
  A[216] = 17533;
  A[217] = 17535;
  A[218] = 17601;
  A[219] = 17603;
  A[220] = 17772;
  A[221] = 17774;
  A[222] = 17872;
  A[223] = 17874;
  A[224] = 18021;
  A[225] = 18023;
  A[226] = 18137;
  A[227] = 18139;
  A[228] = 18292;
  A[229] = 18294;
  A[230] = 18376;
  A[231] = 18378;
  A[232] = 18665;
  A[233] = 18667;
  A[234] = 18936;
  A[235] = 18938;
  A[236] = 19017;
  A[237] = 19019;
  A[238] = 19185;
  A[239] = 19187;
  A[240] = 19288;
  A[241] = 19290;
  A[242] = 19424;
  A[243] = 19426;
  A[244] = 19624;
  A[245] = 19626;
  A[246] = 19897;
  A[247] = 19899;
  A[248] = 19981;
  A[249] = 19983;
  A[250] = 20145;
  A[251] = 20147;
  A[252] = 20252;
  A[253] = 20254;
  A[254] = 20384;
  A[255] = 20386;
  A[256] = 20480;
  A[257] = 20482;
  A[258] = 20668;
  A[259] = 20670;
  A[260] = 20753;
  A[261] = 20755;
  A[262] = 20909;
  A[263] = 20911;
  A[264] = 21017;
  A[265] = 21019;
  A[266] = 21256;
  A[267] = 21258;
  A[268] = 21568;
  A[269] = 21570;
  A[270] = 21752;
  A[271] = 21754;
  A[272] = 21841;
  A[273] = 21843;
  A[274] = 21993;
  A[275] = 21995;
  A[276] = 22104;
  A[277] = 22106;
  A[278] = 22345;
  A[279] = 22347;
  A[280] = 22632;
  A[281] = 22634;
  A[282] = 22740;
  A[283] = 22742;
  A[284] = 22905;
  A[285] = 22907;
  A[286] = 22981;
  A[287] = 22983;
  A[288] = 23152;
  A[289] = 23154;
  A[290] = 23244;
  A[291] = 23246;
  A[292] = 23393;
  A[293] = 23395;
  A[294] = 23517;
  A[295] = 23519;
  A[296] = 23596;
  A[297] = 23598;
  A[298] = 23869;
  A[299] = 23871;
  A[300] = 24116;
  A[301] = 24118;
  A[302] = 24204;
  A[303] = 24206;
  A[304] = 24357;
  A[305] = 24359;
  A[306] = 24477;
  A[307] = 24479;
  A[308] = 24757;
  A[309] = 24759;
  A[310] = 24996;
  A[311] = 24998;
  A[312] = 25104;
  A[313] = 25106;
  A[314] = 25260;
  A[315] = 25262;
  A[316] = 25345;
  A[317] = 25347;
  A[318] = 25533;
  A[319] = 25535;
  A[320] = 25677;
  A[321] = 25679;
  A[322] = 25841;
  A[323] = 25843;
  A[324] = 25948;
  A[325] = 25950;
  A[326] = 26080;
  A[327] = 26082;
  A[328] = 26344;
  A[329] = 26346;
  A[330] = 26617;
  A[331] = 26619;
  A[332] = 26721;
  A[333] = 26723;
  A[334] = 26841;
  A[335] = 26843;
  A[336] = 26992;
  A[337] = 26994;
  A[338] = 27080;
  A[339] = 27082;
  A[340] = 27257;
  A[341] = 27259;
  A[342] = 27496;
  A[343] = 27498;
  A[344] = 27685;
  A[345] = 27687;
  A[346] = 27801;
  A[347] = 27803;
  A[348] = 27956;
  A[349] = 27958;
  A[350] = 28040;
  A[351] = 28042;
  A[352] = 28221;
  A[353] = 28223;
  A[354] = 28289;
  A[355] = 28291;
  A[356] = 28460;
  A[357] = 28462;
  A[358] = 28560;
  A[359] = 28562;
  A[360] = 28721;
  A[361] = 28723;
  A[362] = 28960;
  A[363] = 28962;
  A[364] = 29225;
  A[365] = 29227;
  A[366] = 29329;
  A[367] = 29331;
  A[368] = 29496;
  A[369] = 29498;
  A[370] = 29568;
  A[371] = 29570;
  A[372] = 29808;
  A[373] = 29810;
  A[374] = 30049;
  A[375] = 30051;
  A[376] = 30313;
  A[377] = 30315;
  A[378] = 30421;
  A[379] = 30423;
  A[380] = 30584;
  A[381] = 30586;
  A[382] = 30660;
  A[383] = 30662;
  A[384] = 30808;
  A[385] = 30810;
  A[386] = 30948;
  A[387] = 30950;
  A[388] = 31049;
  A[389] = 31051;
  A[390] = 31221;
  A[391] = 31223;
  A[392] = 31485;
  A[393] = 31487;
  A[394] = 31724;
  A[395] = 31726;
  A[396] = 31772;
  A[397] = 31774;
  A[398] = 31908;
  A[399] = 31910;
  A[400] = 32013;
  A[401] = 32015;
  A[402] = 32181;
  A[403] = 32183;
  A[404] = 32444;
  A[405] = 32446;
  A[406] = 32685;
  A[407] = 32687;
}
